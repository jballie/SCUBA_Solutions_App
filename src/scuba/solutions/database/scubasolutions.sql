
DROP TABLE WAIVER;
DROP TABLE PAYMENT;
DROP TABLE RESERVATION;
DROP TABLE CUSTOMER;
DROP TABLE DIVE_TRIP;
DROP SEQUENCE S_CUST_ID;
DROP SEQUENCE S_TRIP_ID;
DROP SEQUENCE S_RESERVATION_ID;
/

 /
CREATE TABLE DIVE_TRIP(
 trip_id          NUMBER,
 trip_date        DATE,
 available_seats  NUMBER DEFAULT 8,
 departure_time   INTERVAL DAY(0) TO SECOND,
 weather_status   VARCHAR2(30) DEFAULT 'OK',
 CONSTRAINT DIVE_TRIP_PK PRIMARY KEY(trip_id));
 
 /
 CREATE TABLE CUSTOMER(
  cust_id   NUMBER,
  first_name  VARCHAR(15),
  last_name VARCHAR (25),
  street VARCHAR (50),
  city VARCHAR(30),
  state_of_residence VARCHAR (2),
  zip VARCHAR(5),
  phone VARCHAR(12),
  email VARCHAR(40),
  dob DATE,
  cert_agency VARCHAR(20),
  cert_no VARCHAR(20),
  CONSTRAINT CUSTOMER_PK PRIMARY KEY (cust_id));
  /
CREATE TABLE RESERVATION(
 reservation_id NUMBER,
 cust_id NUMBER,
 trip_id NUMBER,
 reservation_status VARCHAR (8),
 CONSTRAINT RESERVATION_PK PRIMARY KEY(reservation_id),
 CONSTRAINT RESERVATION_FK_DIVE_TRIP FOREIGN KEY(trip_id) REFERENCES DIVE_TRIP(trip_id) ON DELETE CASCADE,
 CONSTRAINT RESERVATION_FK_CUST_ID FOREIGN KEY(cust_id) REFERENCES CUSTOMER(cust_id) ON DELETE CASCADE);
/

CREATE TABLE PAYMENT(
reservation_id NUMBER,
payment_status VARCHAR2(7) DEFAULT 'Unpaid',
cc_confirm_no NUMBER,
date_processed DATE,
amount NUMBER,
CONSTRAINT PAYMENT_PK PRIMARY KEY (reservation_id),
CONSTRAINT PAYMENT_FK_RESERVATION FOREIGN KEY (reservation_id) REFERENCES RESERVATION(reservation_id) ON DELETE CASCADE);
/
CREATE TABLE WAIVER(
 reservation_id NUMBER,
 waiver_status VARCHAR(12) DEFAULT 'Incomplete',
 date_signed DATE,
 er_first VARCHAR(15),
 er_last VARCHAR(30),
 er_phone VARCHAR (12),
 CONSTRAINT WAIVER_PK PRIMARY KEY(reservation_id),
 CONSTRAINT WAIVER_FK_RESERVATION FOREIGN KEY(reservation_id) REFERENCES RESERVATION(reservation_id) ON DELETE CASCADE);
 
/


 
 CREATE SEQUENCE S_TRIP_ID
 MINVALUE 1000
 INCREMENT BY 1;
 
 
 CREATE SEQUENCE S_CUST_ID
 MINVALUE 1
 INCREMENT BY 1;
 
 CREATE SEQUENCE S_RESERVATION_ID
 MINVALUE 100
 INCREMENT BY 1;
 /
 CREATE OR REPLACE TRIGGER trip_id_trig
 BEFORE INSERT ON DIVE_TRIP
 FOR EACH ROW
 BEGIN
  SELECT S_TRIP_ID.NEXTVAL
  INTO :new.trip_id
  FROM dual;
END;
/
CREATE OR REPLACE TRIGGER cust_id_trig
BEFORE INSERT ON CUSTOMER
FOR EACH ROW
BEGIN
  SELECT S_CUST_ID.NEXTVAL
  INTO :new.cust_id
  FROM dual;
END;
/
CREATE OR REPLACE TRIGGER reservation_id_trig
BEFORE INSERT ON RESERVATION
FOR EACH ROW
BEGIN
  SELECT S_RESERVATION_ID.NEXTVAL
  INTO :new.reservation_id
  FROM dual;
END;
/

